PlayerPawn

Input variables
===============================================================================
Aliases
Keys must have an alias function name. This alias will call an exec function in
your player class if you have one. This is good for one time use functions like
QSFire()

Buttons
If you need to know when the player releases or is holding a button, you must
have an input button variable, and an alias binding.

Input Button Variable
The player class must contain your button variables (var input byte bMyButton;)
The button is true when held, false when not.

Alias Binding
In order to prevent 'Bad button command' from logging when you press your button,
you have to bind it. To do this while inside UT press '~' to bring up your
console, then type PREFERENCES <enter> to bring up Advanced Options. Select
ADVANCED, KEY ALAISES, ALIASES, then go down to an empty space and enter your
alias name and the command parameter BUTTON bMyButton.


//
aLookUp:    Keyboard look up / down, aliased to LookUp / LookDown in game
aTurn:      ?

aBaseY:     + MoveForward   - MoveBackward
aBaseX:     + TurnRight     - TurnLeft
aUp:        + Jump          - Crouch
aLookUp:    + LookUp        - LookDown

bLook:      ?
bRun:       Aliased to "walking", should slow pawn down
bStrafe:    Aliased to "Strafe"

bFire:      This is set along with Fire() being called at Fire alias
bAltFire:   This is set along with AltFire() being called at AltFire alias



Movement functions
===============================================================================
PlayerTick()
- Called after Tick()
- PlayerPawn only implements this function in states
- if bUpdatePosition -> ClientUpdatePosition()
- Calls PlayerMove()

    PlayerMove()
    - Scales input axes
    - Updates rotation (?)
    - Calculates new acceleration based on input axes
    - IF CLIENT --> calls ReplicateMove()
    - IF SERVER --> calls ProcessMove()

        ReplicateMove()
        - Only ever gets called on the Client, only one implementation
        - Sets up a linked list of SavedMoves
        - Calls ProcessMove() to simulate the movement locally
        - If it's too early to send a new move to the server, breaks here
        - Otherwise, calls ServerMove()
        
            ServerMove()
            - Called on the server ONLY if replicated from a Client. Never called for standalone
            - Acts as a receiver from the ReplicateMove() function
            - Process lost packet if found, and calls MoveAutonomous() for it
            - Check is player tried to fire, calls Fire() if so
            - Calls MoveAutonomous() for the current move
            - If the client has accumulated positional error, call ClientAdjustPosition()
            
                ClientAdjustPosition()
                - Replicated from the server to AutonomousProxies ONLY
                - Adjusts location / velocity / base to match the server
                - The only function that sets bUpdatePosition to true
                - bUpdatePosition = true causes PlayerTick() to call ClientUpdatePosition()
                
                ClientUpdatePosition()
                - Calls MoveAutonomous() for each SavedMove
                - Turns off bUpdatePosition flag